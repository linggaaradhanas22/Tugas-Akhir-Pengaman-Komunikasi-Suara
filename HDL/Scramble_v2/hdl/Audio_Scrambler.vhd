
---------------------------------------------------------
--  This code is generated by Terasic System Builder
---------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Audio_Scrambler is
port
(

	------------ CLOCK ------------
	CLOCK2_50       	:in    	std_logic;
	CLOCK3_50       	:in    	std_logic;
	CLOCK4_50       	:in    	std_logic;
	CLOCK_50        	:in    	std_logic;

	------------ KEY ------------
	KEY             	:in    	std_logic_vector(3 downto 0);

	------------ SW ------------
	SW              	:in    	std_logic_vector(9 downto 0);

	------------ LED ------------
	LEDR            	:out   	std_logic_vector(9 downto 0);

	------------ Audio ------------
	AUD_ADCDAT      	:in    	std_logic;
	AUD_ADCLRCK     	:inout 	std_logic;
	AUD_BCLK        	:inout 	std_logic;
	AUD_DACDAT      	:out   	std_logic;
	AUD_DACLRCK     	:inout 	std_logic;
	AUD_XCK         	:buffer   	std_logic;

	------------ I2C for Audio and Video-In ------------
	FPGA_I2C_SCLK   	:out   	std_logic;
	FPGA_I2C_SDAT   	:inout 	std_logic
);

end entity;



---------------------------------------------------------
--  Structural coding
---------------------------------------------------------


architecture rtl of Audio_Scrambler is

	-- declare --
	signal Lin, Rin, Lout, Rout : signed(15 downto 0);
	signal Ldone, Rdone : std_logic;
	
	signal in_real, out_real : std_logic_vector(15 downto 0);
	signal do_en : std_logic;
	
	signal shift_key : std_logic_vector(23 downto 0);
	
	-- Scrambler Component declaration
	component ScramblerAudio
	port (
		clock  	 : in std_logic;
		reset     : in std_logic;
		di_en 	 :	in std_logic;
		shift_key : in std_logic_vector(23 downto 0);
		in_real	 : in std_logic_vector(15 downto 0);
		do_en		 : out std_logic;
		out_real	 : out std_logic_vector(15 downto 0)
	);
	end component ScramblerAudio;

begin

-- body --
 
	shift_key <= "101001100010100110000000"; --when SW(0) = '1' else (others => '0');
	--LEDR(0) <= SW(0);
	
	in_real <= std_logic_vector(Lin) when Ldone = '1' else (others => '0');
	Lout <= signed(out_real) when do_en = '1' else (others => '0');
	
	-- Audio interface core instantiation
  Audio_interface: entity work.Audio_interface
  Generic map (
	SAMPLE_RATE => 32 --in KHz
  )
  Port map (
		clk => clock_50,
		rst => not key(0),
		AUD_XCK => AUD_XCK,
		I2C_SCLK => FPGA_I2C_SCLK,
      I2C_SDAT => FPGA_I2C_SDAT,
		AUD_BCLK => AUD_BCLK,
		AUD_DACLRCK => AUD_DACLRCK,
		AUD_ADCLRCK => AUD_ADCLRCK,
		AUD_ADCDAT => AUD_ADCDAT,
		AUD_DACDAT => AUD_DACDAT,
		Rin => Rin,
		Lin => Lin,
		Rout => Rout,
		Lout => Lout,
		Rdone => Rdone,
		Ldone => Ldone
	);
	
	-- Pass audio input to the scrambler
	Scrambler_interface: ScramblerAudio
	port map (
		clock => AUD_XCK,
		reset => not KEY(0),
		di_en => '1',
		do_en => do_en,
		shift_key => shift_key,
		in_real => in_real,
		out_real => out_real
	);
	

end rtl;

