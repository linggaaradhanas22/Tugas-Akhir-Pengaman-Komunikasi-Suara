
---------------------------------------------------------
--  This code is generated by Terasic System Builder
---------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity WM8731_Pass is
port
(

	------------ CLOCK ------------
	CLOCK2_50       	:in    	std_logic;
	CLOCK3_50       	:in    	std_logic;
	CLOCK4_50       	:in    	std_logic;
	CLOCK_50        	:in    	std_logic;

	------------ KEY ------------
	KEY             	:in    	std_logic_vector(3 downto 0);

	------------ SW ------------
	SW              	:in    	std_logic_vector(9 downto 0);

	------------ LED ------------
	LEDR            	:out   	std_logic_vector(9 downto 0);

	------------ Audio ------------
	AUD_ADCDAT      	:in    	std_logic;
	AUD_ADCLRCK     	:inout 	std_logic;
	AUD_BCLK        	:inout 	std_logic;
	AUD_DACDAT      	:out   	std_logic;
	AUD_DACLRCK     	:inout 	std_logic;
	AUD_XCK         	:buffer   	std_logic;

	------------ I2C for Audio and Video-In ------------
	FPGA_I2C_SCLK   	:out   	std_logic;
	FPGA_I2C_SDAT   	:inout 	std_logic
);

end entity;


---------------------------------------------------------
--  Structural coding
---------------------------------------------------------


architecture rtl of WM8731_Pass is

	-- declare --
	signal Ldone 	 : std_logic;
	signal Lin, Lout: signed(15 downto 0);
	signal Rout : signed(15 downto 0) := (others => '0');
	signal shift_key: std_logic_vector(23 downto 0) := (others => '0');
	signal in_real	 : std_logic_vector(15 downto 0);
	signal out_real : std_logic_vector(15 downto 0);
	
	component ScramblerAudio
	port (
		clock  	 : in std_logic;
		reset     : in std_logic;
		di_en 	 :	in std_logic;
		shift_key : in std_logic_vector(23 downto 0);
		in_real	 : in std_logic_vector(15 downto 0);
		out_real	 : out std_logic_vector(15 downto 0)
	);
	end component ScramblerAudio;

begin

	-- body --
  Audio_interface: entity work.Audio_interface
  Generic map (SAMPLE_RATE => 32 --in KHz
					)
  Port map (
		clk => clock_50,
		rst => not key(0),
		AUD_XCK => AUD_XCK,
		I2C_SCLK => FPGA_I2C_SCLK,
      I2C_SDAT => FPGA_I2C_SDAT,
		AUD_BCLK => AUD_BCLK,
		AUD_DACLRCK => AUD_DACLRCK,
		AUD_ADCLRCK => AUD_ADCLRCK,
		AUD_ADCDAT => AUD_ADCDAT,
		AUD_DACDAT => AUD_DACDAT,
		Lin => Lin,
		Lout => Lout,
		Rout => Rout,
		Ldone => Ldone
		);
		
	Scrambler_interface: ScramblerAudio
	port map (
		clock => AUD_XCK,
		reset => not key(0),
		di_en => '1',
		shift_key => shift_key,
		in_real => in_real,
		out_real => out_real
	);
	
	in_real <= std_logic_vector(Lin);
		
	Scrambler_Controller: process(AUD_XCK, KEY(0)) is 
	begin 
		if (key(0) = '0') then 
			Lout <= x"0000";
		elsif (rising_edge(AUD_XCK)) then 
			if (Ldone = '1') then Lout <= signed(out_real); end if;
		end if;
	end process;
	
end rtl;

