-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\my_hdlcoder_sqrt_bitset_control\Sqrt_block.vhd
-- Created: 2024-12-22 16:30:51
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Sqrt_block
-- Source Path: my_hdlcoder_sqrt_bitset_control/Sqrt/Sqrt
-- Hierarchy Level: 1
-- Model version: 1.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Sqrt_pkg.ALL;

ENTITY Sqrt_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        dout                              :   OUT   std_logic_vector(17 DOWNTO 0)  -- ufix18_En18
        );
END Sqrt_block;


ARCHITECTURE rtl OF Sqrt_block IS

  -- Signals
  SIGNAL Root_Square0_temp1               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL din_unsigned                     : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL resizedin                        : unsigned(35 DOWNTO 0);  -- ufix36_En36
  SIGNAL resizedin_temp                   : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_0                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL cmp0                             : std_logic;  -- ufix1
  SIGNAL root_0_temp0                     : std_logic;  -- ufix1
  SIGNAL root_0_temp1                     : std_logic;  -- ufix1
  SIGNAL Root_0                           : std_logic;  -- ufix1
  SIGNAL currentRoot1_p                   : std_logic;  -- ufix1
  SIGNAL Root_Square0_temp0               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Root_Square0                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL currentRoot_Square1_p            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL constant_01                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend1          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL constant_01_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL adder_add_temp                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Root_Square1_temp1               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL resizedin1_p                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_1                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL cmp1                             : std_logic;  -- ufix1
  SIGNAL Root_1                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL currentRoot2_p                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Root_Square1_temp0               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Root_Square1                     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL currentRoot_Square2_p            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL constant_02                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend2          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL constant_02_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend2                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL adder_add_temp_1                 : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Root_Square2_temp1               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL resizedin2_p                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_2                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL cmp2                             : std_logic;  -- ufix1
  SIGNAL Root_2                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL currentRoot3_p                   : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Root_Square2_temp0               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Root_Square2                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL currentRoot_Square3_p            : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL constant_03                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend3          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL constant_03_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend3                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL adder_add_temp_2                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Root_Square3_temp1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL resizedin3_p                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_3                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cmp3                             : std_logic;  -- ufix1
  SIGNAL Root_3                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL currentRoot4_p                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Root_Square3_temp0               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Root_Square3                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL currentRoot_Square4_p            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL constant_04                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend4          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL constant_04_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend4                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL adder_add_temp_3                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Root_Square4_temp1               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL resizedin4_p                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_4                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL cmp4                             : std_logic;  -- ufix1
  SIGNAL Root_4                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL currentRoot5_p                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Root_Square4_temp0               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Root_Square4                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL currentRoot_Square5_p            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL constant_05                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend5          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL constant_05_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend5                 : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL adder_add_temp_4                 : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Root_Square5_temp1               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL resizedin5_p                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_5                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL cmp5                             : std_logic;  -- ufix1
  SIGNAL Root_5                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL currentRoot6_p                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Root_Square5_temp0               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Root_Square5                     : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL currentRoot_Square6_p            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL constant_06                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend6          : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL constant_06_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend6                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL adder_add_temp_5                 : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Root_Square6_temp1               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL resizedin6_p                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_6                       : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL cmp6                             : std_logic;  -- ufix1
  SIGNAL Root_6                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL currentRoot7_p                   : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Root_Square6_temp0               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Root_Square6                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL currentRoot_Square7_p            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL constant_07                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend7          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL constant_07_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend7                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL adder_add_temp_6                 : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Root_Square7_temp1               : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL resizedin7_p                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_7                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL cmp7                             : std_logic;  -- ufix1
  SIGNAL Root_7                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL currentRoot8_p                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Root_Square7_temp0               : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Root_Square7                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL currentRoot_Square8_p            : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL constant_08                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend8          : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL constant_08_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend8                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL adder_add_temp_7                 : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL Root_Square8_temp1               : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL resizedin8_p                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_8                       : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL cmp8                             : std_logic;  -- ufix1
  SIGNAL Root_8                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL currentRoot9_p                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Root_Square8_temp0               : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Root_Square8                     : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL currentRoot_Square9_p            : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL constant_09                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend9          : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL constant_09_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend9                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL adder_add_temp_8                 : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Root_Square9_temp1               : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL resizedin9_p                     : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_9                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL cmp9                             : std_logic;  -- ufix1
  SIGNAL Root_9                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL currentRoot10_p                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Root_Square9_temp0               : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Root_Square9                     : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL currentRoot_Square10_p           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL constant_010                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend10         : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL constant_010_1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend10                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL adder_add_temp_9                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Root_Square10_temp1              : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL resizedin10_p                    : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_10                      : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL cmp10                            : std_logic;  -- ufix1
  SIGNAL Root_10                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL currentRoot11_p                  : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Root_Square10_temp0              : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL Root_Square10                    : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL currentRoot_Square11_p           : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL constant_011                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend11         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL constant_011_1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend11                : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL adder_add_temp_10                : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Root_Square11_temp1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL resizedin11_p                    : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_11                      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL cmp11                            : std_logic;  -- ufix1
  SIGNAL Root_11                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL currentRoot12_p                  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Root_Square11_temp0              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Root_Square11                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL currentRoot_Square12_p           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL constant_012                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend12         : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL constant_012_1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend12                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL adder_add_temp_11                : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Root_Square12_temp1              : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL resizedin12_p                    : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_12                      : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL cmp12                            : std_logic;  -- ufix1
  SIGNAL Root_12                          : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL currentRoot13_p                  : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Root_Square12_temp0              : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Root_Square12                    : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL currentRoot_Square13_p           : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL constant_013                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend13         : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL constant_013_1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend13                : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL adder_add_temp_12                : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL Root_Square13_temp1              : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL resizedin13_p                    : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_13                      : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL cmp13                            : std_logic;  -- ufix1
  SIGNAL Root_13                          : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL currentRoot14_p                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Root_Square13_temp0              : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Root_Square13                    : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL currentRoot_Square14_p           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL constant_014                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend14         : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL constant_014_1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend14                : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL adder_add_temp_13                : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Root_Square14_temp1              : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL resizedin14_p                    : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_14                      : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL cmp14                            : std_logic;  -- ufix1
  SIGNAL Root_14                          : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL currentRoot15_p                  : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Root_Square14_temp0              : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL Root_Square14                    : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL currentRoot_Square15_p           : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL constant_015                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend15         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL constant_015_1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend15                : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL adder_add_temp_14                : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Root_Square15_temp1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL resizedin15_p                    : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_15                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL cmp15                            : std_logic;  -- ufix1
  SIGNAL Root_15                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL currentRoot16_p                  : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Root_Square15_temp0              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Root_Square15                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL currentRoot_Square16_p           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL constant_016                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend16         : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL constant_016_1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend16                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL adder_add_temp_15                : unsigned(34 DOWNTO 0);  -- ufix35
  SIGNAL Root_Square16_temp1              : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL resizedin16_p                    : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL din_temp_16                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL cmp16                            : std_logic;  -- ufix1
  SIGNAL Root_16                          : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL currentRoot17_p                  : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Root_Square16_temp0              : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL Root_Square16                    : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL currentRoot_Square17_p           : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL constant_017                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend17         : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL constant_017_1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend17                : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL adder_add_temp_16                : unsigned(36 DOWNTO 0);  -- ufix37
  SIGNAL Root_Square17_temp1              : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL resizedin17_p                    : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL cmp17                            : std_logic;  -- ufix1
  SIGNAL Root_17                          : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL currentRoot18_p                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL prevRoot_p2_reg                  : vector_of_unsigned18(0 TO 1);  -- ufix18 [2]
  SIGNAL prevRoot_p_2                     : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL outdata_1                        : unsigned(17 DOWNTO 0);  -- ufix18_En18

BEGIN
  -- Sqrt Implementation using Shift

  Root_Square0_temp1 <= to_unsigned(16#1#, 2);

  din_unsigned <= unsigned(din);

  resizedin <= din_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  resizedin_temp <= resizedin;

  din_temp_0 <= resizedin_temp(35 DOWNTO 34);

  
  cmp0 <= '1' WHEN Root_Square0_temp1 <= din_temp_0 ELSE
      '0';

  root_0_temp0 <= '0';

  root_0_temp1 <= '1';

  
  Root_0 <= root_0_temp0 WHEN cmp0 = '0' ELSE
      root_0_temp1;

  root_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot1_p <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot1_p <= Root_0;
      END IF;
    END IF;
  END PROCESS root_reg_process;


  Root_Square0_temp0 <= to_unsigned(16#0#, 2);

  
  Root_Square0 <= Root_Square0_temp0 WHEN cmp0 = '0' ELSE
      Root_Square0_temp1;

  root_sq_p_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square1_p <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square1_p <= Root_Square0;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_process;


  constant_01 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend1 <= currentRoot_Square1_p & constant_01;

  constant_01_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend1 <= currentRoot1_p & constant_01_1;

  adder_add_temp <= resize(prevRoot_Square_extend1, 5) + resize(prevRoot_extend1, 5);
  
  Root_Square1_temp1 <= "1111" WHEN adder_add_temp(4) /= '0' ELSE
      adder_add_temp(3 DOWNTO 0);

  resizedin_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin1_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin1_p <= resizedin_temp;
      END IF;
    END IF;
  END PROCESS resizedin_reg_process;


  din_temp_1 <= resizedin1_p(35 DOWNTO 32);

  
  cmp1 <= '1' WHEN Root_Square1_temp1 <= din_temp_1 ELSE
      '0';

  Root_1 <= unsigned'(currentRoot1_p & cmp1);

  root_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot2_p <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot2_p <= Root_1;
      END IF;
    END IF;
  END PROCESS root_reg_1_process;


  Root_Square1_temp0 <= currentRoot_Square1_p & constant_01_1;

  
  Root_Square1 <= Root_Square1_temp0 WHEN cmp1 = '0' ELSE
      Root_Square1_temp1;

  root_sq_p_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square2_p <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square2_p <= Root_Square1;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_1_process;


  constant_02 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend2 <= currentRoot_Square2_p & constant_02;

  constant_02_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend2 <= currentRoot2_p & constant_02_1;

  adder_add_temp_1 <= resize(prevRoot_Square_extend2, 7) + resize(prevRoot_extend2, 7);
  
  Root_Square2_temp1 <= "111111" WHEN adder_add_temp_1(6) /= '0' ELSE
      adder_add_temp_1(5 DOWNTO 0);

  resizedin_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin2_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin2_p <= resizedin1_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_1_process;


  din_temp_2 <= resizedin2_p(35 DOWNTO 30);

  
  cmp2 <= '1' WHEN Root_Square2_temp1 <= din_temp_2 ELSE
      '0';

  Root_2 <= currentRoot2_p & cmp2;

  root_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot3_p <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot3_p <= Root_2;
      END IF;
    END IF;
  END PROCESS root_reg_2_process;


  Root_Square2_temp0 <= currentRoot_Square2_p & constant_02_1;

  
  Root_Square2 <= Root_Square2_temp0 WHEN cmp2 = '0' ELSE
      Root_Square2_temp1;

  root_sq_p_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square3_p <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square3_p <= Root_Square2;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_2_process;


  constant_03 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend3 <= currentRoot_Square3_p & constant_03;

  constant_03_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend3 <= currentRoot3_p & constant_03_1;

  adder_add_temp_2 <= resize(prevRoot_Square_extend3, 9) + resize(prevRoot_extend3, 9);
  
  Root_Square3_temp1 <= "11111111" WHEN adder_add_temp_2(8) /= '0' ELSE
      adder_add_temp_2(7 DOWNTO 0);

  resizedin_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin3_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin3_p <= resizedin2_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_2_process;


  din_temp_3 <= resizedin3_p(35 DOWNTO 28);

  
  cmp3 <= '1' WHEN Root_Square3_temp1 <= din_temp_3 ELSE
      '0';

  Root_3 <= currentRoot3_p & cmp3;

  root_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot4_p <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot4_p <= Root_3;
      END IF;
    END IF;
  END PROCESS root_reg_3_process;


  Root_Square3_temp0 <= currentRoot_Square3_p & constant_03_1;

  
  Root_Square3 <= Root_Square3_temp0 WHEN cmp3 = '0' ELSE
      Root_Square3_temp1;

  root_sq_p_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square4_p <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square4_p <= Root_Square3;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_3_process;


  constant_04 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend4 <= currentRoot_Square4_p & constant_04;

  constant_04_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend4 <= currentRoot4_p & constant_04_1;

  adder_add_temp_3 <= resize(prevRoot_Square_extend4, 11) + resize(prevRoot_extend4, 11);
  
  Root_Square4_temp1 <= "1111111111" WHEN adder_add_temp_3(10) /= '0' ELSE
      adder_add_temp_3(9 DOWNTO 0);

  resizedin_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin4_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin4_p <= resizedin3_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_3_process;


  din_temp_4 <= resizedin4_p(35 DOWNTO 26);

  
  cmp4 <= '1' WHEN Root_Square4_temp1 <= din_temp_4 ELSE
      '0';

  Root_4 <= currentRoot4_p & cmp4;

  root_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot5_p <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot5_p <= Root_4;
      END IF;
    END IF;
  END PROCESS root_reg_4_process;


  Root_Square4_temp0 <= currentRoot_Square4_p & constant_04_1;

  
  Root_Square4 <= Root_Square4_temp0 WHEN cmp4 = '0' ELSE
      Root_Square4_temp1;

  root_sq_p_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square5_p <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square5_p <= Root_Square4;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_4_process;


  constant_05 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend5 <= currentRoot_Square5_p & constant_05;

  constant_05_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend5 <= currentRoot5_p & constant_05_1;

  adder_add_temp_4 <= resize(prevRoot_Square_extend5, 13) + resize(prevRoot_extend5, 13);
  
  Root_Square5_temp1 <= "111111111111" WHEN adder_add_temp_4(12) /= '0' ELSE
      adder_add_temp_4(11 DOWNTO 0);

  resizedin_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin5_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin5_p <= resizedin4_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_4_process;


  din_temp_5 <= resizedin5_p(35 DOWNTO 24);

  
  cmp5 <= '1' WHEN Root_Square5_temp1 <= din_temp_5 ELSE
      '0';

  Root_5 <= currentRoot5_p & cmp5;

  root_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot6_p <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot6_p <= Root_5;
      END IF;
    END IF;
  END PROCESS root_reg_5_process;


  Root_Square5_temp0 <= currentRoot_Square5_p & constant_05_1;

  
  Root_Square5 <= Root_Square5_temp0 WHEN cmp5 = '0' ELSE
      Root_Square5_temp1;

  root_sq_p_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square6_p <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square6_p <= Root_Square5;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_5_process;


  constant_06 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend6 <= currentRoot_Square6_p & constant_06;

  constant_06_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend6 <= currentRoot6_p & constant_06_1;

  adder_add_temp_5 <= resize(prevRoot_Square_extend6, 15) + resize(prevRoot_extend6, 15);
  
  Root_Square6_temp1 <= "11111111111111" WHEN adder_add_temp_5(14) /= '0' ELSE
      adder_add_temp_5(13 DOWNTO 0);

  resizedin_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin6_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin6_p <= resizedin5_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_5_process;


  din_temp_6 <= resizedin6_p(35 DOWNTO 22);

  
  cmp6 <= '1' WHEN Root_Square6_temp1 <= din_temp_6 ELSE
      '0';

  Root_6 <= currentRoot6_p & cmp6;

  root_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot7_p <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot7_p <= Root_6;
      END IF;
    END IF;
  END PROCESS root_reg_6_process;


  Root_Square6_temp0 <= currentRoot_Square6_p & constant_06_1;

  
  Root_Square6 <= Root_Square6_temp0 WHEN cmp6 = '0' ELSE
      Root_Square6_temp1;

  root_sq_p_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square7_p <= to_unsigned(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square7_p <= Root_Square6;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_6_process;


  constant_07 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend7 <= currentRoot_Square7_p & constant_07;

  constant_07_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend7 <= currentRoot7_p & constant_07_1;

  adder_add_temp_6 <= resize(prevRoot_Square_extend7, 17) + resize(prevRoot_extend7, 17);
  
  Root_Square7_temp1 <= X"FFFF" WHEN adder_add_temp_6(16) /= '0' ELSE
      adder_add_temp_6(15 DOWNTO 0);

  resizedin_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin7_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin7_p <= resizedin6_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_6_process;


  din_temp_7 <= resizedin7_p(35 DOWNTO 20);

  
  cmp7 <= '1' WHEN Root_Square7_temp1 <= din_temp_7 ELSE
      '0';

  Root_7 <= currentRoot7_p & cmp7;

  root_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot8_p <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot8_p <= Root_7;
      END IF;
    END IF;
  END PROCESS root_reg_7_process;


  Root_Square7_temp0 <= currentRoot_Square7_p & constant_07_1;

  
  Root_Square7 <= Root_Square7_temp0 WHEN cmp7 = '0' ELSE
      Root_Square7_temp1;

  root_sq_p_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square8_p <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square8_p <= Root_Square7;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_7_process;


  constant_08 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend8 <= currentRoot_Square8_p & constant_08;

  constant_08_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend8 <= currentRoot8_p & constant_08_1;

  adder_add_temp_7 <= resize(prevRoot_Square_extend8, 19) + resize(prevRoot_extend8, 19);
  
  Root_Square8_temp1 <= "111111111111111111" WHEN adder_add_temp_7(18) /= '0' ELSE
      adder_add_temp_7(17 DOWNTO 0);

  resizedin_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin8_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin8_p <= resizedin7_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_7_process;


  din_temp_8 <= resizedin8_p(35 DOWNTO 18);

  
  cmp8 <= '1' WHEN Root_Square8_temp1 <= din_temp_8 ELSE
      '0';

  Root_8 <= currentRoot8_p & cmp8;

  root_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot9_p <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot9_p <= Root_8;
      END IF;
    END IF;
  END PROCESS root_reg_8_process;


  Root_Square8_temp0 <= currentRoot_Square8_p & constant_08_1;

  
  Root_Square8 <= Root_Square8_temp0 WHEN cmp8 = '0' ELSE
      Root_Square8_temp1;

  root_sq_p_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square9_p <= to_unsigned(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square9_p <= Root_Square8;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_8_process;


  constant_09 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend9 <= currentRoot_Square9_p & constant_09;

  constant_09_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend9 <= currentRoot9_p & constant_09_1;

  adder_add_temp_8 <= resize(prevRoot_Square_extend9, 21) + resize(prevRoot_extend9, 21);
  
  Root_Square9_temp1 <= X"FFFFF" WHEN adder_add_temp_8(20) /= '0' ELSE
      adder_add_temp_8(19 DOWNTO 0);

  resizedin_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin9_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin9_p <= resizedin8_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_8_process;


  din_temp_9 <= resizedin9_p(35 DOWNTO 16);

  
  cmp9 <= '1' WHEN Root_Square9_temp1 <= din_temp_9 ELSE
      '0';

  Root_9 <= currentRoot9_p & cmp9;

  root_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot10_p <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot10_p <= Root_9;
      END IF;
    END IF;
  END PROCESS root_reg_9_process;


  Root_Square9_temp0 <= currentRoot_Square9_p & constant_09_1;

  
  Root_Square9 <= Root_Square9_temp0 WHEN cmp9 = '0' ELSE
      Root_Square9_temp1;

  root_sq_p_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square10_p <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square10_p <= Root_Square9;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_9_process;


  constant_010 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend10 <= currentRoot_Square10_p & constant_010;

  constant_010_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend10 <= currentRoot10_p & constant_010_1;

  adder_add_temp_9 <= resize(prevRoot_Square_extend10, 23) + resize(prevRoot_extend10, 23);
  
  Root_Square10_temp1 <= "1111111111111111111111" WHEN adder_add_temp_9(22) /= '0' ELSE
      adder_add_temp_9(21 DOWNTO 0);

  resizedin_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin10_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin10_p <= resizedin9_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_9_process;


  din_temp_10 <= resizedin10_p(35 DOWNTO 14);

  
  cmp10 <= '1' WHEN Root_Square10_temp1 <= din_temp_10 ELSE
      '0';

  Root_10 <= currentRoot10_p & cmp10;

  root_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot11_p <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot11_p <= Root_10;
      END IF;
    END IF;
  END PROCESS root_reg_10_process;


  Root_Square10_temp0 <= currentRoot_Square10_p & constant_010_1;

  
  Root_Square10 <= Root_Square10_temp0 WHEN cmp10 = '0' ELSE
      Root_Square10_temp1;

  root_sq_p_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square11_p <= to_unsigned(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square11_p <= Root_Square10;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_10_process;


  constant_011 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend11 <= currentRoot_Square11_p & constant_011;

  constant_011_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend11 <= currentRoot11_p & constant_011_1;

  adder_add_temp_10 <= resize(prevRoot_Square_extend11, 25) + resize(prevRoot_extend11, 25);
  
  Root_Square11_temp1 <= X"FFFFFF" WHEN adder_add_temp_10(24) /= '0' ELSE
      adder_add_temp_10(23 DOWNTO 0);

  resizedin_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin11_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin11_p <= resizedin10_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_10_process;


  din_temp_11 <= resizedin11_p(35 DOWNTO 12);

  
  cmp11 <= '1' WHEN Root_Square11_temp1 <= din_temp_11 ELSE
      '0';

  Root_11 <= currentRoot11_p & cmp11;

  root_reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot12_p <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot12_p <= Root_11;
      END IF;
    END IF;
  END PROCESS root_reg_11_process;


  Root_Square11_temp0 <= currentRoot_Square11_p & constant_011_1;

  
  Root_Square11 <= Root_Square11_temp0 WHEN cmp11 = '0' ELSE
      Root_Square11_temp1;

  root_sq_p_reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square12_p <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square12_p <= Root_Square11;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_11_process;


  constant_012 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend12 <= currentRoot_Square12_p & constant_012;

  constant_012_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend12 <= currentRoot12_p & constant_012_1;

  adder_add_temp_11 <= resize(prevRoot_Square_extend12, 27) + resize(prevRoot_extend12, 27);
  
  Root_Square12_temp1 <= "11111111111111111111111111" WHEN adder_add_temp_11(26) /= '0' ELSE
      adder_add_temp_11(25 DOWNTO 0);

  resizedin_reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin12_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin12_p <= resizedin11_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_11_process;


  din_temp_12 <= resizedin12_p(35 DOWNTO 10);

  
  cmp12 <= '1' WHEN Root_Square12_temp1 <= din_temp_12 ELSE
      '0';

  Root_12 <= currentRoot12_p & cmp12;

  root_reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot13_p <= to_unsigned(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot13_p <= Root_12;
      END IF;
    END IF;
  END PROCESS root_reg_12_process;


  Root_Square12_temp0 <= currentRoot_Square12_p & constant_012_1;

  
  Root_Square12 <= Root_Square12_temp0 WHEN cmp12 = '0' ELSE
      Root_Square12_temp1;

  root_sq_p_reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square13_p <= to_unsigned(16#0000000#, 26);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square13_p <= Root_Square12;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_12_process;


  constant_013 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend13 <= currentRoot_Square13_p & constant_013;

  constant_013_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend13 <= currentRoot13_p & constant_013_1;

  adder_add_temp_12 <= resize(prevRoot_Square_extend13, 29) + resize(prevRoot_extend13, 29);
  
  Root_Square13_temp1 <= X"FFFFFFF" WHEN adder_add_temp_12(28) /= '0' ELSE
      adder_add_temp_12(27 DOWNTO 0);

  resizedin_reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin13_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin13_p <= resizedin12_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_12_process;


  din_temp_13 <= resizedin13_p(35 DOWNTO 8);

  
  cmp13 <= '1' WHEN Root_Square13_temp1 <= din_temp_13 ELSE
      '0';

  Root_13 <= currentRoot13_p & cmp13;

  root_reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot14_p <= to_unsigned(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot14_p <= Root_13;
      END IF;
    END IF;
  END PROCESS root_reg_13_process;


  Root_Square13_temp0 <= currentRoot_Square13_p & constant_013_1;

  
  Root_Square13 <= Root_Square13_temp0 WHEN cmp13 = '0' ELSE
      Root_Square13_temp1;

  root_sq_p_reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square14_p <= to_unsigned(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square14_p <= Root_Square13;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_13_process;


  constant_014 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend14 <= currentRoot_Square14_p & constant_014;

  constant_014_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend14 <= currentRoot14_p & constant_014_1;

  adder_add_temp_13 <= resize(prevRoot_Square_extend14, 31) + resize(prevRoot_extend14, 31);
  
  Root_Square14_temp1 <= "111111111111111111111111111111" WHEN adder_add_temp_13(30) /= '0' ELSE
      adder_add_temp_13(29 DOWNTO 0);

  resizedin_reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin14_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin14_p <= resizedin13_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_13_process;


  din_temp_14 <= resizedin14_p(35 DOWNTO 6);

  
  cmp14 <= '1' WHEN Root_Square14_temp1 <= din_temp_14 ELSE
      '0';

  Root_14 <= currentRoot14_p & cmp14;

  root_reg_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot15_p <= to_unsigned(16#0000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot15_p <= Root_14;
      END IF;
    END IF;
  END PROCESS root_reg_14_process;


  Root_Square14_temp0 <= currentRoot_Square14_p & constant_014_1;

  
  Root_Square14 <= Root_Square14_temp0 WHEN cmp14 = '0' ELSE
      Root_Square14_temp1;

  root_sq_p_reg_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square15_p <= to_unsigned(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square15_p <= Root_Square14;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_14_process;


  constant_015 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend15 <= currentRoot_Square15_p & constant_015;

  constant_015_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend15 <= currentRoot15_p & constant_015_1;

  adder_add_temp_14 <= resize(prevRoot_Square_extend15, 33) + resize(prevRoot_extend15, 33);
  
  Root_Square15_temp1 <= X"FFFFFFFF" WHEN adder_add_temp_14(32) /= '0' ELSE
      adder_add_temp_14(31 DOWNTO 0);

  resizedin_reg_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin15_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin15_p <= resizedin14_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_14_process;


  din_temp_15 <= resizedin15_p(35 DOWNTO 4);

  
  cmp15 <= '1' WHEN Root_Square15_temp1 <= din_temp_15 ELSE
      '0';

  Root_15 <= currentRoot15_p & cmp15;

  root_reg_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot16_p <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot16_p <= Root_15;
      END IF;
    END IF;
  END PROCESS root_reg_15_process;


  Root_Square15_temp0 <= currentRoot_Square15_p & constant_015_1;

  
  Root_Square15 <= Root_Square15_temp0 WHEN cmp15 = '0' ELSE
      Root_Square15_temp1;

  root_sq_p_reg_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square16_p <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square16_p <= Root_Square15;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_15_process;


  constant_016 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend16 <= currentRoot_Square16_p & constant_016;

  constant_016_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend16 <= currentRoot16_p & constant_016_1;

  adder_add_temp_15 <= resize(prevRoot_Square_extend16, 35) + resize(prevRoot_extend16, 35);
  
  Root_Square16_temp1 <= "1111111111111111111111111111111111" WHEN adder_add_temp_15(34) /= '0' ELSE
      adder_add_temp_15(33 DOWNTO 0);

  resizedin_reg_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin16_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin16_p <= resizedin15_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_15_process;


  din_temp_16 <= resizedin16_p(35 DOWNTO 2);

  
  cmp16 <= '1' WHEN Root_Square16_temp1 <= din_temp_16 ELSE
      '0';

  Root_16 <= currentRoot16_p & cmp16;

  root_reg_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot17_p <= to_unsigned(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot17_p <= Root_16;
      END IF;
    END IF;
  END PROCESS root_reg_16_process;


  Root_Square16_temp0 <= currentRoot_Square16_p & constant_016_1;

  
  Root_Square16 <= Root_Square16_temp0 WHEN cmp16 = '0' ELSE
      Root_Square16_temp1;

  root_sq_p_reg_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square17_p <= to_unsigned(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot_Square17_p <= Root_Square16;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_16_process;


  constant_017 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend17 <= currentRoot_Square17_p & constant_017;

  constant_017_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend17 <= currentRoot17_p & constant_017_1;

  adder_add_temp_16 <= resize(prevRoot_Square_extend17, 37) + resize(prevRoot_extend17, 37);
  
  Root_Square17_temp1 <= X"FFFFFFFFF" WHEN adder_add_temp_16(36) /= '0' ELSE
      adder_add_temp_16(35 DOWNTO 0);

  resizedin_reg_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin17_p <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin17_p <= resizedin16_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_16_process;


  
  cmp17 <= '1' WHEN Root_Square17_temp1 <= resizedin17_p ELSE
      '0';

  Root_17 <= currentRoot17_p & cmp17;

  root_reg_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot18_p <= to_unsigned(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        currentRoot18_p <= Root_17;
      END IF;
    END IF;
  END PROCESS root_reg_17_process;


  prevRoot_p2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prevRoot_p2_reg <= (OTHERS => to_unsigned(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        prevRoot_p2_reg(0) <= currentRoot18_p;
        prevRoot_p2_reg(1) <= prevRoot_p2_reg(0);
      END IF;
    END IF;
  END PROCESS prevRoot_p2_process;

  prevRoot_p_2 <= prevRoot_p2_reg(1);

  outdata_1 <= prevRoot_p_2;

  dout <= std_logic_vector(outdata_1);

END rtl;

