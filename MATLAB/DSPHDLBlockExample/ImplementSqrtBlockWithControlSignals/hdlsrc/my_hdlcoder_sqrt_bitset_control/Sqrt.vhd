-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\my_hdlcoder_sqrt_bitset_control\Sqrt.vhd
-- Created: 2024-12-22 16:30:51
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- dataOut                       ce_out        1
-- validOut                      ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Sqrt
-- Source Path: my_hdlcoder_sqrt_bitset_control/Sqrt
-- Hierarchy Level: 0
-- Model version: 1.4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Sqrt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        validIn                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        dataOut                           :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
        validOut                          :   OUT   std_logic
        );
END Sqrt;


ARCHITECTURE rtl OF Sqrt IS

  -- Component Declarations
  COMPONENT Sqrt_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          dout                            :   OUT   std_logic_vector(17 DOWNTO 0)  -- ufix18_En18
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Sqrt_block
    USE ENTITY work.Sqrt_block(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL hdl_Delay_reg                    : std_logic_vector(19 DOWNTO 0);  -- ufix1 [20]
  SIGNAL y                                : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL y_1                              : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL y_unsigned                       : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL Switch_out1                      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL Delay_out1                       : unsigned(17 DOWNTO 0);  -- ufix18_En18

BEGIN
  u_Sqrt : Sqrt_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              din => dataIn,  -- ufix18_En18
              dout => y_1  -- ufix18_En18
              );

  enb <= clk_enable;

  hdl_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hdl_Delay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        hdl_Delay_reg(0) <= validIn;
        hdl_Delay_reg(19 DOWNTO 1) <= hdl_Delay_reg(18 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS hdl_Delay_process;

  y <= hdl_Delay_reg(19);

  
  switch_compare_1 <= '1' WHEN y > '0' ELSE
      '0';

  y_unsigned <= unsigned(y_1);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_unsigned(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Switch_out1 <= Delay_out1 WHEN switch_compare_1 = '0' ELSE
      y_unsigned;

  dataOut <= std_logic_vector(Switch_out1);

  ce_out <= clk_enable;

  validOut <= y;

END rtl;

