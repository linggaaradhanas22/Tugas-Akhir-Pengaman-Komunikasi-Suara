%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%          Generated by MATLAB 24.1 and Fixed-Point Designer 24.1          %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [coeff_Q1, x_min_Q2, Q0, Q1, Q2] = GoertzelCalc_fixpt(x, coeff)
    % GoertzelFilter - Applies the Goertzel algorithm to a signal x
    % Inputs:
    %   x     : Input signal (ADC samples)
    %   coeff : Goertzel filter coefficient
    % Output:
    %   Q0    : Goertzel output 
    %   Q1    : Delayed version of Q0
    %   Q2    : Delayed version of Q2

    fm = get_fimath();

    N = fi(length(x), 0, 10, 0, fm); % Get the number of samples
    
    % Initialize the state variables Q0, Q1, and Q2
    Q0 = fi(0, 1, 16, 3, fm);
    Q1 = fi(0, 1, 16, 3, fm);
    Q2 = fi(0, 1, 16, 3, fm);
    coeff_Q1 = fi(0, 1, 16, 2, fm);
    x_min_Q2 = fi(0, 1, 16, 3, fm);


    % Loop through the input signal x
    for n = fi(1, 0, 1, 0, fm):N        
        % Update the state variables
        Q2 (:) = Q1;
        Q1 (:) = Q0;
        
        % Compute multiplication of coeff and Q1
        coeff_Q1 (:) = coeff * Q1;

        % Compute substraction between x and Q2
        x_min_Q2 (:) = x(n) - Q2; 
        
        % Compute Q0 based on the Goertzel algorithm equation
        Q0 (:) = coeff_Q1 + x_min_Q2;


    end
end


function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Round',...
	     'OverflowAction', 'Saturate',...
	     'ProductMode','FullPrecision',...
	     'SumMode','FullPrecision');
end
